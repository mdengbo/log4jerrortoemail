<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false">
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <!--<property name="LOG_HOME" value="./home" />-->
    <!--读取 .properties 中的配置信息-->
    <springProperty scope="context" name="log.path" source="path.log"/>
    <springProperty scope="context" name="flag" source="flag"/>
    <!-- 控制台输出 -->
    <!-- <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
         <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
             &lt;!&ndash;格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符&ndash;&gt;
             <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
         </encoder>
     </appender>-->
    <!-- 按照每天生成日志文件 -->
    <appender name="FILE"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <!-- <FileNamePattern>${LOG_HOME}/TestWeb.log.%d{yyyy-MM-dd}.log</FileNamePattern>-->
            <FileNamePattern>${log.path}/TestWeb.log.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <!--日志异步到数据库 -->
    <!--  邮件 -->
    <!-- SMTP server的地址，必需指定。如网易的SMTP服务器地址是： smtp.163.com -->
    <property name="smtpHost" value="smtp.qq.com"/><!--填入要发送邮件的smtp服务器地址-->
    <!-- SMTP server的端口地址。默认值：25   QQ:587-->
    <property name="smtpPort" value="587"/>
    <!-- 发送邮件账号，默认为null -->
    <property name="username" value="144086473416@qq.com"/><!--发件人账号-->
    <!-- 发送邮件密码，默认为null-->
    <property name="password" value="gvadxbxiktyuhgde"/><!--发件人密码-->
    <!-- 如果设置为true，appender将会使用SSL连接到日志服务器。默认值：false -->
    <property name="SSL" value="false"/>
    <!-- 指定发送到那个邮箱，可设置多个<to>属性，指定多个目的邮箱 -->
    <property name="email_to" value="144086473416@qq.com"/><!--收件人账号多个可以逗号隔开-->
    <!-- 指定发件人名称。如果设置成“&lt;ADMIN&gt; ”，则邮件发件人将会是“<ADMIN> ” -->
    <property name="email_from" value="144086473416@qq.com" />
    <!-- 指定emial的标题，它需要满足PatternLayout中的格式要求。如果设置成“Log: %logger - %msg ”，就案例来讲，则发送邮件时，标题为“【Error】: com.foo.Bar - Hello World ”。 默认值："%logger{20} - %m". -->
    <property name="email_subject" value="【fiel-serverError】: %logger" />
    <!-- ERROR邮件发送 -->
    <appender name="EMAIL" class="ch.qos.logback.classic.net.SMTPAppender">
        <smtpHost>${smtpHost}</smtpHost>
        <smtpPort>${smtpPort}</smtpPort>
        <username>${username}</username>
        <password>${password}</password>
        <!--是否开启异步发送 默认true （开启后一直没有发送成功） 关掉 false 发送成功-->
        <asynchronousSending>false</asynchronousSending>
        <SSL>${SSL}</SSL>
        <to>${email_to}</to>
        <from>${email_from}</from>
        <subject>${email_subject}</subject>
        　　　　 <!-- html格式-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>%date%level%thread%logger{0}%line%message</Pattern>
        </layout>
        　　　　 <!-- 这里采用等级过滤器 指定等级相符才发送 -->
        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <evaluator class="ch.qos.logback.classic.boolex.JaninoEventEvaluator">
                <expression>
                    <!-- 这里可以用java里的表达式 注意如果是字符串 引用的值也需要加上 转义引号-->
                    if(level >= DEBUG &amp;&amp; null != throwable &amp;&amp;  &quot;${flag}&quot;.equals(&quot;a&quot;)) {
                    return true;
                    }
                    return false;
                </expression>
            </evaluator>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <cyclicBufferTracker class="ch.qos.logback.core.spi.CyclicBufferTracker">
            <!-- 每个电子邮件只发送一个日志条目 -->
            <bufferSize>1</bufferSize>
        </cyclicBufferTracker>
    </appender>
    <!-- 日志输出级别 -->
    <root level="info">
        <appender-ref ref="EMAIL"/>
        <!-- <appender-ref ref="STDOUT" />-->
        <appender-ref ref="FILE" />
    </root>
</configuration>